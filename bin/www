#!/usr/bin/env node

/**
 * Module dependencies.
 */
var express = require('express');
var app = require('../app');
var debug = require('debug')('bark:server');
var http = require('http');
var fs      = require('fs');
var parser  = require('body-parser');

/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(process.env.OPENSHIFT_NODEJS_PORT || 9999);
 app.set('port', port);

/**
 * Create HTTP server.
 */

  var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
 var ipaddress = process.env.OPENSHIFT_NODEJS_IP || "127.0.0.1";
 server.listen( port, ipaddress, function() {
     console.log((new Date()) + ' Server is listening on port 8080');
 });
  //server.listen(port);
  server.on('error', onError);
 server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

    var index = require('../routes/index');
    var users = require('../routes/users');

    app.use('/', index);
    app.use('/users', users);

    app.use(logger('dev'));
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({ extended: false }));
    app.use(cookieParser());
    app.use(express.static(path.join(__dirname, 'public')));

    // view engine setup
    app.set('views', path.join(__dirname, 'views'));
    app.set('view engine', 'jade');

  function onListening() {
    var addr = process.env.OPENSHIFT_NODEJS_IP || "127.0.0.1";
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
